"Queries."
type Query {
  "Get a specific video."
  video(id: ID!): Video!

  """
  Get a slice of videos.
  Filter by title and/or contributor (if specified).
  Ordered by sort title (or cleaned title).
  """
  videos(paginate: Paginate, title: String, contributor: ContributorFilter): [Video!]!

  "Get a slice of TV series, ordered by sort name (or cleaned name)."
  series(paginate: Paginate): [Series!]!

  """
  Get a list of episodes.
  Filter by series details (if specified).
  """
  episodes(series: SeriesFilter): [Episode!]!
}


"Mutations."
type Mutation {
  # transitional until backend scraper and storage
  setTomatometer(id: ID!, tomatometer: Int!): Video!
}


"Video details."
type Video {
  """
  Video identity.
  Currently a hash of title + releaseYear.
  """
  id: ID!

  """
  Title, in en-US, without cut or year parenthetical qualifiers.
  Currently derived from the mp4 moov.udta.meta.ilst.©nam.data atom.
  """
  title: String!

  """
  Sortable title (optional).
  Omits leading articles such as "The", "A", or "An".
  Destyleized and normalized (i.e., "Se7en" => "Seven").
  Normalized to first in the series (i.e., "Fast & Furious 2").
  Includes explicit episode arabic-number for sequels (as roman numerals are not readily sortable).
  Currently derived from the mp4 moov.udta.meta.ilst.sonm.data atom.
  """
  sortTitle: String

  """
  Year of initial/theatrical release.
  Per Gregorian calendar.
  Required due to remake ambiguity.
  Currently derived from the mp4 moov.udta.meta.ilst.©day.data atom.
  """
  releaseYear: Int!

  """
  List of various renditions of this video.
  Filter by rendition quality (if specified).
  Null or empty list implies this video is a placeholder, and renditions are coming soon.
  """
  renditions(quality: QualityFilter): [Rendition!]

  """
  Cover art image (optional).
  Base64 encoded JPEG.
  Downsampled per geometry (if specified).
  Currently derived from the mp4 moov.udta.meta.ilst.covr.data atom.
  """
  artwork(geometry: GeometryFilter): Jpeg

  """
  Description paragraph (optional).
  Currently derived from the mp4 moov.udta.meta.ilst.desc.data atom.
  """
  description: String

  "NYI"
  directors: [Contributor!]

  "NYI"
  writers: [Contributor!]

  "NYI"
  cast: [Contributor!]	        # TODO add other kinds of contributors

  """
  Primary genre (optional).
  Currently derived from the mp4 moov.udta.meta.ilst.©gen.data atom.
  """
  genre: String

  "Content advisory rating (optional)."
  rating: String

  "Rotten Tomatoes reviewer score (optional)."
  tomatometer: Int

  "Episodic details (optional)."
  episode: Episode
}


"Video rendition details."
type Rendition {
  """
  Rendition identity.
  Currently a hash of local path.
  """
  id: ID!

  "Video rendition download URL."
  url: String!

  """
  Cut (optional).
  Omit wrapping parenthesis.
  If absent, "theatrical" is implied.
  """
  cut: String

  "Quality details."
  quality: Quality!

  "Length of video, in minutes."
  duration: Int

  """
  Is video high definition, i.e., 1080p resolution?
  Currently derived from the mp4 moov.udta.meta.ilst.hdvd.data atom.
  """
  isHD: Boolean

  "Size of the video, in bytes."
  size: Int!
}


"Episode (i.e., TV Show) details."
type Episode {
  series: Series!
  season: Int!
  episode: Int!
  video: Video!
}

input EpisodeFilter {
  series: SeriesFilter
  season: Int
  episode: Int
}


"Series details."
type Series {
  "Series identity."
  id: ID!

  """
  Series name.
  May include reboot qualifiers (e.g., "The Twilight Zone (2019)").
  Currently derived from the mp4 moov.udta.meta.ilst.tvsh.data atom.
  """
  name: String!

  """
  Sortable name (optional).
  Omits leading articles such as "The", "A", or "An".
  Currently derived from the mp4 moov.udta.meta.ilst.sosn.data atom.
  """
  sortName: String

  """
  Series image (optional).
  NYI.
  Base64 encoded JPEG.
  Downsampled per geometry (if specified).
  """
  artwork(geometry: GeometryFilter): Jpeg

  "List of episodes."
  episodes: [Episode!]!
}

input SeriesFilter {
  id: ID
  name: String
}


type Contributor {
  id: ID!
  name: String!
}

input ContributorFilter {
  id: ID		       # will need contributor interning index
  name: String
}


type Quality {
  videoCodec: VideoCodec!
  resolution: Resolution!
  transcodeBudget: TranscodeBudget
}

input QualityFilter {
  videoCodec: VideoCodec
  resolution: Resolution
}

enum VideoCodec {
  "h.265"
  h265

  "h.264 (min-spec, default)"
  h264
}

"""
Label to describe resolution.
Examples: 480p, 720p, 1080p.
[Not an enum because of leading-digit values.]
"""
scalar Resolution

"Amount of time and bitrate afforded to HandBrake transcode."
enum TranscodeBudget {
  Super_HQ
  HQ
  Fast
  Very_Fast
}


input GeometryFilter {
  width: Int
  height: Int
}


scalar Jpeg			# base64


"Slice of identifiable objects."
input Paginate {
  """
  Maximum length of list returned (optional).
  If omitted, return remaining objects.
  """
  first: Int

  """
  Return objects after this identified one.
  Requires a stable list.
  """
  after: ID
}
