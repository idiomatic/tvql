type Query {

  video(id: ID!): Video!

  videos(paginate: Paginate, title: String, contributor: ContributorFilter): [Video!]!

  series(paginate: Paginate): [Series!]!

  episodes(series: SeriesFilter): [Episode!]!

}


type Mutation {
  # transitional until backend scraper and storage
  setTomatometer(id: ID!, tomatometer: Int!): Video!
}


type Video {
  id: ID!
  title: String!		# in en-US, omit (cut), omit (year)
  sortTitle: String		# trim articles (e.g. "The"), explicitly enumerate series, optionally trim subtitle
  releaseYear: Int!		# in Gregorian calendar, of theatrical release
  renditions(quality: QualityFilter): [Rendition!] # null => coming soon
  artwork(geometry: GeometryFilter): Jpeg # downsample
  description: String
  directors: [Contributor!]
  writers: [Contributor!]
  cast: [Contributor!]	        # TODO add other kinds of contributors
  genre: String
  rating: String
  tomatometer: Int
  episode: Episode
}


type Rendition {
  id: ID!
  url: String!
  cut: String			# null => theatrical
  quality: Quality!
  duration: Int			# in minutes
  isHD: Boolean			# approximately quality.resolution == 1080P
  size: Int!			# in bytes
}


type Episode {			# i.e. TV Show
  series: Series!
  season: Int!
  episode: Int!
  video: Video!
}

input EpisodeFilter {
  series: SeriesFilter
  season: Int
  episode: Int
}


type Series {
  id: ID!
  name: String!
  sortName: String
  artwork(geometry: GeometryFilter): Jpeg # downsample
  episodes: [Episode!]!
}

input SeriesFilter {
  id: ID
  name: String
}


type Contributor {
  id: ID!
  name: String!
}

input ContributorFilter {
  name: String
}


type Quality {
  videoCodec: VideoCodec!
  resolution: Resolution!
  transcodeBudget: TranscodeBudget
}

input QualityFilter {
  videoCodec: VideoCodec	# for client compatibility concerns
  resolution: Resolution
}

enum VideoCodec {
  H265
  H264
}

enum Resolution {
  _1080P
  _720P
  _480P
}

enum TranscodeBudget {
  SUPER_HQ
  HQ
  FAST
  VERY_FAST
}


input GeometryFilter {
  width: Int
  height: Int
}

scalar Jpeg			# base64


input Paginate {
  first: Int
  after: ID
}
