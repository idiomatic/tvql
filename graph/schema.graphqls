"Queries."
type Query {
  "Get a specific video."
  video(id: ID!): Video!

  """
  Get a slice of videos.
  Filter by title and/or contributor (if specified).
  Ordered by sortTitle.
  """
  videos(paginate: Paginate, title: String, contributor: ContributorFilter): [Video!]!

  """
  Get a slice of TV series.
  Ordered by series sortName.
  """
  series(paginate: Paginate): [Series!]!

  """
  Get a list of TV seasons.
  Filter by series details (if specified).
  Ordered by series sortName then season number.
  """
  seasons(series: SeriesFilter): [Season!]!

  """
  Get a list of TV episodes.
  Filter by season and series (if specified).
  Ordered by series sortName, season number, then episode number.
  """
  episodes(series: SeriesFilter, season: SeasonFilter): [Episode!]!
  """
  Count of TV episodes.
  Filter by season and series (if specified).
  """
  episodeCount(series: SeriesFilter, season: SeasonFilter): Int!
}


"Video details."
type Video {
  """
  Video identity.
  Currently a hash of title + releaseYear for idempotence.
  """
  id: ID!

  """
  Title, in en-US, without cut or year parenthetical qualifiers.
  Currently obtained from the mp4 moov.udta.meta.ilst.©nam.data atom.
  """
  title: String!

  """
  Sortable title.
  Omits leading articles such as "The", "A", or "An".
  Destyleized and normalized (e.g., "Se7en" => "Seven").
  Normalized the series (e.g., "Fast & Furious 2").
  Includes explicit episode arabic-number for sequels (as roman numerals are not readily sortable).
  Currently obtained from the mp4 moov.udta.meta.ilst.sonm.data atom else derived from title.
  """
  sortTitle: String!

  """
  Year of initial/theatrical release.
  Per Gregorian calendar.
  Required due to remake ambiguity.
  Currently obtained from the mp4 moov.udta.meta.ilst.©day.data atom.
  """
  releaseYear: Int!

  """
  List of various renditions of this video.
  Filter by rendition quality (if specified).
  Null or empty list implies this video is a placeholder, and renditions are coming soon.
  """
  renditions(quality: QualityFilter): [Rendition!]

  """
  Cover art image (optional).
  Downsampled per geometry (if specified).
  Currently obtained from the mp4 moov.udta.meta.ilst.covr.data atom.
  """
  artwork(geometry: GeometryFilter): Jpeg

  """
  Description paragraph (optional).
  Currently obtained from the mp4 moov.udta.meta.ilst.desc.data atom.
  """
  description: String

  "NYI"
  directors: [Contributor!]

  "NYI"
  writers: [Contributor!]

  "NYI"
  cast: [Contributor!]	        # TODO add other kinds of contributors

  """
  Primary genre (optional).
  Currently obtained from the mp4 moov.udta.meta.ilst.©gen.data atom.
  """
  genre: String

  "Content advisory rating (optional)."
  contentRating: String

  "Rotten Tomatoes reviewer score (optional)."
  tomatometer: Int

  "Episodic details (optional)."
  episode: Episode
}


"NYI"
type Contributor {
  id: ID!
  name: String!
}

"NYI"
input ContributorFilter {
  id: ID
  name: String
}


"Series details."
type Series {
  "Series identity."
  id: ID!

  """
  Series name.
  May include reboot qualifiers (e.g., "The Twilight Zone (2019)").
  Currently obtained from the mp4 moov.udta.meta.ilst.tvsh.data atom.
  """
  name: String!

  """
  Sortable name.
  Omits leading articles such as "The", "A", or "An".
  Currently obtained from the mp4 moov.udta.meta.ilst.sosn.data atom else derived from name.
  """
  sortName: String!

  """
  Series image (optional).
  NYI.
  Downsampled per geometry (if specified).
  """
  artwork(geometry: GeometryFilter): Jpeg

  "List of seasons."
  seasons: [Season!]!

  "List of episodes, regardless of season."
  episodes: [Episode!]!
  "Count of episodes, regardless of season."
  episodeCount: Int!
}

"Series selection."
input SeriesFilter {
  id: ID
  name: String
}


"Season details."
type Season {
  """
  Season identity.
  Currently a hash of series name and season number for idempotence.
  """
  id: ID!
  "Series."
  series: Series!
  """
  Season number, within a series.
  Currently obtained from the mp4 moov.udta.meta.ilst.tvsn.data atom.
  """
  season: Int!
  "List of episodes in season."
  episodes: [Episode!]!
  "Count of episodes in season."
  episodeCount: Int!
}

"Season selection."
input SeasonFilter {
  id: ID
  season: Int			# XXX paginator?
}


"Episode (i.e., TV Show) details."
type Episode {
  "Season."
  season: Season!
  """
  Episode number, within a season.
  Currently obtained from the mp4 moov.udta.meta.ilst.tves.data atom.
  """
  episode: Int!
  """
  Episode ID, within a series.
  Currently obtained from the mp4 moov.udta.meta.ilst.tven.data atom.
  """
  episodeID: String
  "Video."
  video: Video!
}

"Episode selection."
input EpisodeFilter {
  episode: Int			# XXX paginator?
}


"Video rendition details."
type Rendition {
  """
  Rendition identity.
  Currently a hash of local path for idempotence.
  """
  id: ID!

  "Video rendition download URL."
  url: String!

  """
  Cut (optional).
  Omit wrapping parenthesis.
  If absent, "theatrical" is implied.
  """
  cut: String

  "Quality details."
  quality: Quality!

  "Length of video, in minutes."
  duration: Int

  """
  Is video high definition, i.e., 1080p?
  Currently obtained from the mp4 moov.udta.meta.ilst.hdvd.data atom.
  """
  isHD: Boolean

  "Size of the video, in bytes."
  size: Int!
}


"Quality details."
type Quality {
  videoCodec: VideoCodec!
  resolution: Resolution!
  transcodeBudget: TranscodeBudget
}

"Quality selection."
input QualityFilter {
  videoCodec: VideoCodec
  resolution: Resolution
}

"""
Video codec.
Useful for playback hardware limitations.
"""
enum VideoCodec {
  "h.265"
  h265

  "h.264 (min-spec, default)"
  h264
}

"""
Label to describe resolution.
Examples: 480p, 720p, 1080p.
[Not an enum because of leading-digit values.]
"""
scalar Resolution

"Amount of time and bitrate afforded to HandBrake transcode."
enum TranscodeBudget {
  Super_HQ
  HQ
  Fast
  Very_Fast
}


"Geometry selection."
input GeometryFilter {
  width: Int
  height: Int
}


"""
Jpeg image.
Encoded in base64.
"""
scalar Jpeg


"Select a slice of identifiable objects."
input Paginate {
  """
  Maximum length of list returned (optional).
  If omitted, return remaining objects.
  """
  first: Int

  """
  Return objects after this identified one (optional).
  Requires a stable list.
  """
  after: ID
}
