// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Contributor struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type ContributorFilter struct {
	Name *string `json:"name"`
}

type Episode struct {
	Series  *Series `json:"series"`
	Season  int     `json:"season"`
	Episode int     `json:"episode"`
	Video   *Video  `json:"video"`
}

type EpisodeFilter struct {
	Series  *SeriesFilter `json:"series"`
	Season  *int          `json:"season"`
	Episode *int          `json:"episode"`
}

type GeometryFilter struct {
	Width  *int `json:"width"`
	Height *int `json:"height"`
}

type Paginate struct {
	First *int    `json:"first"`
	After *string `json:"after"`
}

type Quality struct {
	VideoCodec      VideoCodec       `json:"videoCodec"`
	Resolution      string           `json:"resolution"`
	TranscodeBudget *TranscodeBudget `json:"transcodeBudget"`
}

type QualityFilter struct {
	VideoCodec *VideoCodec `json:"videoCodec"`
	Resolution *string     `json:"resolution"`
}

type Rendition struct {
	ID       string   `json:"id"`
	URL      string   `json:"url"`
	Cut      *string  `json:"cut"`
	Quality  *Quality `json:"quality"`
	Duration *int     `json:"duration"`
	IsHd     *bool    `json:"isHD"`
	Size     int      `json:"size"`
}

type Series struct {
	ID       string     `json:"id"`
	Name     string     `json:"name"`
	SortName *string    `json:"sortName"`
	Artwork  *string    `json:"artwork"`
	Episodes []*Episode `json:"episodes"`
}

type SeriesFilter struct {
	ID   *string `json:"id"`
	Name *string `json:"name"`
}

type Video struct {
	ID          string         `json:"id"`
	Title       string         `json:"title"`
	SortTitle   *string        `json:"sortTitle"`
	ReleaseYear int            `json:"releaseYear"`
	Renditions  []*Rendition   `json:"renditions"`
	Artwork     *string        `json:"artwork"`
	Description *string        `json:"description"`
	Directors   []*Contributor `json:"directors"`
	Writers     []*Contributor `json:"writers"`
	Cast        []*Contributor `json:"cast"`
	Genre       *string        `json:"genre"`
	Rating      *string        `json:"rating"`
	Tomatometer *int           `json:"tomatometer"`
	Episode     *Episode       `json:"episode"`
}

type TranscodeBudget string

const (
	TranscodeBudgetSuperHq  TranscodeBudget = "Super_HQ"
	TranscodeBudgetHq       TranscodeBudget = "HQ"
	TranscodeBudgetFast     TranscodeBudget = "Fast"
	TranscodeBudgetVeryFast TranscodeBudget = "Very_Fast"
)

var AllTranscodeBudget = []TranscodeBudget{
	TranscodeBudgetSuperHq,
	TranscodeBudgetHq,
	TranscodeBudgetFast,
	TranscodeBudgetVeryFast,
}

func (e TranscodeBudget) IsValid() bool {
	switch e {
	case TranscodeBudgetSuperHq, TranscodeBudgetHq, TranscodeBudgetFast, TranscodeBudgetVeryFast:
		return true
	}
	return false
}

func (e TranscodeBudget) String() string {
	return string(e)
}

func (e *TranscodeBudget) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TranscodeBudget(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TranscodeBudget", str)
	}
	return nil
}

func (e TranscodeBudget) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VideoCodec string

const (
	VideoCodecH265 VideoCodec = "h265"
	VideoCodecH264 VideoCodec = "h264"
)

var AllVideoCodec = []VideoCodec{
	VideoCodecH265,
	VideoCodecH264,
}

func (e VideoCodec) IsValid() bool {
	switch e {
	case VideoCodecH265, VideoCodecH264:
		return true
	}
	return false
}

func (e VideoCodec) String() string {
	return string(e)
}

func (e *VideoCodec) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VideoCodec(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VideoCodec", str)
	}
	return nil
}

func (e VideoCodec) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
